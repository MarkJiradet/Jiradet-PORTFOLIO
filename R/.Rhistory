getwd()
c
clear()
clear
head(murders)
library(dslabs)
head(murders)
library("dslabs")
install.packages("dslabs")
library("dslabs")
data(package="dslabs")
head(murders)
tail(murders)
summary(murders)
pop <- murders$population
pop <- sort(pop)
smallest_pop <- pop[1]
print(smallest_pop)
sorted_indices <- order(pop)
print(sorted_indices)
smallest_index <- sorted_indices[1]
smallest_value <- pop[smallest_index]
print(smallest_value)
# 03 WHICH. MIN / MIN
# a) Use which.min to find the index of the entry with the smallest population size
smallest_index <- which.min(pop)
print(smallest_index)
# b) Use min() to find the minimum value in pop
smallest_value <- min(pop)
print(smallest_value)
# 04 What is the name of the U.S. state with the lowest population?
smallest_index <- which.min(murders$population)
smallest_state <- murders$state[smallest_index]
print(smallest_state)
# 05 Identify the name of the U.S. state with the largest population?
largest_index <- which.max(murders$population)
largest_state <- murders$state[largest_index]
print(largest_state)
install.packages("tidyverse")
library(tidyverse)
books <- read_csv("C:/Users/Asus/Downloads/Book reviews/Book reviews/BX_Books.csv", sep = ";")
books <- read_csv2("C:/Users/Asus/Downloads/Book reviews/Book reviews/BX_Books.csv")
ratings <- read_csv2("C:/Users/Asus/Downloads/Book reviews/Book reviews/BX-Book-Ratings.csv")
users <- read_csv2("C:/Users/Asus/Downloads/Book reviews/Book reviews/BX-Users.csv")
head(books)
head(ratings)
head(users)
install.packages("data.table")
library(data.table)
books_dt <- data.table(books)
ratings_dt <- data.table(ratings)
users_dt <- data.table(users)
# b. How many different, unique authors are included in table books_dt?
unique_authors_count <- uniqueN(books_dt$`Book-Author`)
print(unique_authors_count)
# c. What is the earliest release year? What is the last release year? (identify with min and max, use $ operator to identify the variable)
earliest_year <- min(books_dt$`Year-Of-Publication`, na.rm = TRUE)
latest_year <- max(books_dt$`Year-Of-Publication`, na.rm = TRUE)
print(earliest_year)
print(latest_year)
# d. How many missing ages (NA) are there in the user record users_dt?
missing_age_count <- sum(is.na(users_dt$Age))
print(missing_age_count)
# e. What is the maximum rating in the rating table ratings_dt?
max_rating <- max(ratings_dt$`Book-Rating`, na.rm = TRUE)
print(max_rating)
# f. What are the book identifiers (ISBN numbers) with the highest ratings?
highest_ratings <- ratings_dt$ISBN[which.max(ratings_dt$`Book-Rating`)]
print(highest_ratings)
# g. Sort the rating table ratings_dt by the rating use value of each book in descending order. Note:setorder()
setorder(ratings_dt, -`Book-Rating`)
print(ratings_dt)
# h. Determine the locations of the teenage users in the user record users_dt.
teenage_users <- users_dt[!is.na(Age) & Age >= 13 & Age <= 19, Location]
print(teenage_users)
# i. How many books were published from 2000 until 2010?
books_published_count <- books_dt[`Year-Of-Publication` >= 2000 & `Year-Of-Publication` <= 2010, .N]
print(books_published_count)
getwd()
setwd("D:/Bootcamp DataRockie/R")
getwd()
plot(mtcars$hp, mtcars$mpg)
plot(mtcars$hp, mtcars$mpg , pch = 16, col="blue")
plot(mtcars$hp, mtcars$mpg , pch = 16, col="blue")
cor(mtcasr$hp, mtcars$mpg)
plot(mtcars$hp, mtcars$mpg , pch = 16,
col="blue",
main = "My first scatter plot",
xlab = "Horse Power",
ylab = "Mile Per Gallon")
cor(mtcasr$hp, mtcars$mpg)
#get working directory
getwd()
## ggplot2
## library tidyverse
library(tidyverse)
ggplot(data = mtcars, mapping = aes(x = hp, y = mpg))
ggplot(data = mtcars, mapping = aes(x = hp, y = mpg)) +
geom_point()
ggplot(data = mtcars, mapping = aes(x = hp, y = mpg)) +
geom_line()
ggplot(data = mtcars, mapping = aes(x = hp, y = mpg)) +
geom_bar()
ggplot(data = mtcars, mapping = aes(x = hp, y = mpg)) +
geom_point()
ggplot(data = mtcars, mapping = aes(x = hp, y = mpg)) +
geom_point() +
goem_smooth()
ggplot(data = mtcars, mapping = aes(x = hp, y = mpg)) +
geom_point() +
geom_smooth()
ggplot(data = mtcars, mapping = aes(x = hp, y = mpg)) +
geom_point() +
geom_smooth() +
geom_rug()
ggplot(mtcars, aes(hp,mpg)) +
goem_point(size = 3, col = "blue", alpha = 0.2)
ggplot(mtcars, aes(hp,mpg)) +
geom_point(size = 3, col = "blue", alpha = 0.2)
ggplot(mtcars, aes(hp)) +
geom_histogram()
ggplot(mtcars, aes(hp)) +
geom_histogram(bins = 15)
ggplot(mtcars, aes(hp)) +
geom_histogram(bins = 10)
ggplot(mtcars, aes(hp)) +
geom_histogram(bins = 10, fill = "red", alpha = 0.5)
ggplot(mtcars, aes(hp)) +
geom_histogram(bins = 10, fill = "red", alpha = 0.2)
ggplot(mtcars, aes(hp)) +
geom_histogram(bins = 10, fill = "red", alpha = 0.7)
ggplot(mtcars, aes(hp)) +
geom_boxplot()
p = ggplot(mtcars, aes(hp))
p + geom_density()
diamonds
diamonds %>%
count(cut)
ggplot(diamonds, aes(cut)) +
geom_bar()
ggplot(diamonds, aes(cut)) +
geom_bar(fill = "lightblue")
ggplot(diamonds, aes(cut)) +
geom_bar(fill = "#0366ft")
ggplot(diamonds, aes(cut)) +
geom_bar(fill = "#0366fc")
ggplot(diamonds, mapping = aes(cut,fill=cut)) +
geom_bar()
ggplot(diamonds, mapping = aes(cut,fill=color)) +
geom_bar()
ggplot(diamonds, mapping = aes(cut,fill=cut)) +
geom_bar()
ggplot(diamonds, mapping = aes(cut,fill=color)) +
geom_bar()
ggplot(diamonds, mapping = aes(cut,fill=color)) +
geom_bar(position = "dodge")
ggplot(diamonds, mapping = aes(cut,fill=color)) +
geom_bar(position = "fill")
## SCATTER PLOT
ggplot(diamonds, aes(carat, price))
ggplot(diamonds, aes(carat, price)) +
geom_point()
ggplot(small_diamonds, aes(carat, price)) +
geom_point()
small_diamonds = sample_n(diamonds, 5000)
ggplot(small_diamonds, aes(carat, price)) +
geom_point()
small_diamonds = sample_n(diamonds, 5000)
ggplot(small_diamonds, aes(carat, price)) +
geom_point()
small_diamonds = sample_n(diamonds, 5000)
ggplot(small_diamonds, aes(carat, price)) +
geom_point()
small_diamonds = sample_n(diamonds, 5000)
ggplot(small_diamonds, aes(carat, price)) +
geom_point()
#### FACET : SMALL MULTIPLES
ggplot(small_diamonds, aes(carat,price)) +
geom_point() +
facet_wrap(~color)
#### FACET : SMALL MULTIPLES
ggplot(small_diamonds, aes(carat,price)) +
geom_point() +
facet_wrap(~color, ncol=2)
#### FACET : SMALL MULTIPLES
ggplot(small_diamonds, aes(carat,price)) +
geom_point() +
geom_smooth() +
facet_wrap(~color, ncol=2)
ggplot(small_diamonds, aes(carat,price)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~color, ncol=2)
#### FACET : SMALL MULTIPLES
ggplot(small_diamonds, aes(carat,price)) +
geom_point() +
geom_smooth(method = "lm", col="red") +
facet_wrap(~color, ncol=2)
ggplot(small_diamonds, aes(carat,price)) +
geom_point() +
geom_smooth(method = "lm", col="red") +
facet_wrap(~color, ncol=2) +
theme_minimal()
ggplot(small_diamonds, aes(carat,price)) +
geom_point() +
geom_smooth(method = "lm", col="red") +
facet_wrap(~color, ncol=2) +
theme_minimal() +
labs(title = "Relationship betweem carat and price by color",
x = "Carat",
y = "Price USD")
ggplot(small_diamonds, aes(carat,price)) +
geom_point() +
geom_smooth(method = "lm", col="red") +
facet_wrap(~color, ncol=2) +
theme_minimal() +
labs(title = "Relationship betweem carat and price by color",
x = "Carat",
y = "Price USD",
caption = "Source: Diamonds from ggplot2 package")
#### Final Example
ggplot(small_diamonds, aes(carat,price, col=cut)) +
geom_point() +
facet_wrap(~color, ncol=2)
#### Final Example
ggplot(small_diamonds, aes(carat,price, col=cut)) +
geom_point() +
facet_wrap(~color, ncol=2) +
theme_minimal()
#### Final Example
ggplot(small_diamonds, aes(carat,price, col=cut)) +
geom_point(size = 3, alpha = 0.2) +
facet_wrap(~color, ncol=2) +
theme_minimal()
